{"version":3,"sources":["components/Cards.js","components/Tile.js","components/Board.js","components/ScoreBoard.js","components/Game.js","App.js","index.js"],"names":["Cards","cards","player","handleCardClick","onClick","Tile","props","className","selectedTiles","tileIndex","handleTileClick","tileInfo","Board","currentBoard","Array","map","i","trIndex","key","j","ScoreBoard","Game","useState","activePlayer","setActivePlayer","selectedPawn","setSelectedPawn","fill","setSelectedTiles","board","history","setHistory","playerOneCards","playerTwoCards","inactiveCard","activeCard","setCards","setCurrentBoard","isInitialMount","useRef","clickedCardId","firstCard","secondCard","newCardSet","newActiveCard","newInactiveCard","cardShift","useEffect","current","length","movedPawnIndex","destinationTileIndex","beginningBoard","slice","betweenBoard","endBoard","newBoard","concat","handlePawnMovement","clickedPawnIndex","cardMovements","console","log","tileClassesStart","tileClassesBetween","tileClassesEnd","newTileClasses","handlePawnClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1e0a2d2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cards = ({ cards, player, handleCardClick }) => {\r\n    return (\r\n        <>\r\n            <h1>{player} cards</h1>\r\n            <ul>\r\n                <li onClick={() => { handleCardClick(0, player) }}>{cards[0][1]}</li>\r\n                <li onClick={() => { handleCardClick(1, player) }}>{cards[1][1]}</li>\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react'\r\n\r\nconst Tile = (props) => {\r\n    return (<td className={props.selectedTiles[props.tileIndex]} onClick={() => props.handleTileClick(props.tileIndex)}>{props.tileInfo}</td>);\r\n}\r\n\r\nexport default Tile;","import React from 'react'\r\nimport Tile from './Tile'\r\n\r\nconst Board = ({ currentBoard, selectedTiles, handleTileClick }) => {\r\n\r\n    return (\r\n        <table>\r\n            <tbody className=\"board-game\">\r\n                {[...Array(5)].map((i, trIndex) =>\r\n                    <tr key={trIndex}>\r\n                        {[...Array(5)].map((j, tileIndex) =>\r\n                            <Tile selectedTiles={selectedTiles} handleTileClick={handleTileClick} key={(trIndex * 5) + tileIndex} tileIndex={(trIndex * 5) + tileIndex} tileInfo={currentBoard[(trIndex * 5) + tileIndex]}></Tile>\r\n                        )}\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\n\r\nconst ScoreBoard = () => {\r\n    return ( <div>TODO: Score</div> );\r\n}\r\n \r\nexport default ScoreBoard;","import React, { useState, useEffect, useRef } from 'react';\r\nimport Cards from './Cards';\r\nimport Board from './Board';\r\nimport ScoreBoard from './ScoreBoard';\r\n\r\n\r\n\r\nconst Game = () => {\r\n\r\n    const cardA = [1, \"Flying Tiger\", 0, 2, 1, 4];\r\n    const cardB = [2, \"Hidden Dragon\", 1, 1, 1, 1];\r\n    const cardC = [3, \"Jumping Norek\", 0, 3, 4, 2];\r\n    const cardD = [4, \"Ducking Duck\", 0, 1, 2, 4];\r\n    const cardE = [5, \"Obese Goose\", 0, 2, 1, 2];\r\n    \r\n\r\n    const [activePlayer, setActivePlayer] = useState(\"🎅🏽\");\r\n    const [selectedPawn, setSelectedPawn] = useState(null);\r\n    const [selectedTiles, setSelectedTiles] = useState(Array(25).fill('no-movement-allowed'));\r\n    const [history, setHistory] = useState([{\r\n        board: [\r\n            \"🎅🏽\", \"🎅🏽\", \"🎅🏽\", \"🎅🏽\", \"🎅🏽\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\",\r\n        ]\r\n        // board: [\r\n        //     \"0s\", \"1\", \"2\", \"3\", \"4\",\r\n        //     \"5\", \"6\", \"7\", \"8\", \"9\",\r\n        //     \"10\", \"11\", \"12s\", \"13\", \"14\", \r\n        //     \"15\", \"16\", \"17\", \"18\", \"19\",\r\n        //     \"20\", \"21\", \"22\", \"23\", \"24s\",\r\n        // ]\r\n    }]);\r\n    const [cards, setCards] = useState({\r\n        playerOneCards: [cardA, cardB],\r\n        playerTwoCards: [cardC, cardD],\r\n        inactiveCard: cardE,\r\n        activeCard: [0, \"Choose a card to play\", 0, 0, 0, 0]\r\n    })\r\n\r\n\r\n    const [currentBoard, setCurrentBoard] = useState(history[0].board);\r\n    const isInitialMount = useRef(true);\r\n\r\n    const cardShift = (clickedCardId, player) => {\r\n        let newActiveCard = cards.inactiveCard;\r\n        let newInactiveCard = activePlayer === \"🎅🏽\" ? cards.playerOneCards[clickedCardId] : cards.playerTwoCards[clickedCardId];\r\n        let firstCard;\r\n        let secondCard;\r\n        let newCardSet;\r\n        if (activePlayer === \"🎅🏽\" && activePlayer === player && cards.activeCard[0] === 0) {\r\n            firstCard = cards.playerOneCards[0] === newInactiveCard ? newActiveCard : cards.playerOneCards[0]\r\n            secondCard = cards.playerOneCards[1] === newInactiveCard ? newActiveCard : cards.playerOneCards[1]\r\n            newCardSet = {\r\n                playerOneCards: [firstCard, secondCard],\r\n                playerTwoCards: [cards.playerTwoCards[0], cards.playerTwoCards[1]],\r\n                inactiveCard: cards.inactiveCard,\r\n                activeCard: newInactiveCard\r\n            }\r\n            setCards(newCardSet);\r\n        } else if (activePlayer === player && cards.activeCard[0] === 0) {\r\n            firstCard = cards.playerTwoCards[0] === newInactiveCard ? newActiveCard : cards.playerTwoCards[0]\r\n            secondCard = cards.playerTwoCards[1] === newInactiveCard ? newActiveCard : cards.playerTwoCards[1]\r\n            newCardSet = {\r\n                playerOneCards: [cards.playerOneCards[0], cards.playerOneCards[1]],\r\n                playerTwoCards: [firstCard, secondCard],\r\n                inactiveCard: cards.inactiveCard,\r\n                activeCard: newInactiveCard\r\n            }\r\n            setCards(newCardSet);\r\n        }\r\n    }\r\n    const handleCardClick = (clickedCardId, player) => {\r\n        if (activePlayer === player ) {\r\n            cardShift(clickedCardId, player)\r\n        }\r\n        return;\r\n    }\r\n\r\n    const handlePawnClick = (clickedPawnIndex) => {\r\n        if (clickedPawnIndex === selectedPawn) {\r\n            setSelectedPawn(null);\r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n        } else {\r\n            let cardMovements = cards.activeCard.slice(2,6);\r\n            console.log(cardMovements);\r\n            let tileClassesStart = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(0, clickedPawnIndex) : selectedTiles.slice(0, clickedPawnIndex - 5));\r\n            let tileClassesBetween = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(clickedPawnIndex + 1, clickedPawnIndex + 5) : selectedTiles.slice(clickedPawnIndex - 4, clickedPawnIndex));\r\n            let tileClassesEnd = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(clickedPawnIndex + 6, 25) : selectedTiles.slice(clickedPawnIndex + 1, 25));\r\n\r\n            let newTileClasses = (activePlayer === \"🎅🏽\" ? tileClassesStart.concat(\"active-pawn\", tileClassesBetween, \"movement-allowed\", tileClassesEnd) : tileClassesStart.concat(\"movement-allowed\", tileClassesBetween, \"active-pawn\", tileClassesEnd));\r\n\r\n            setSelectedTiles(newTileClasses);\r\n            setSelectedPawn(clickedPawnIndex);\r\n        }\r\n    }\r\n\r\n    const handlePawnMovement = (movedPawnIndex, destinationTileIndex) => {\r\n        let beginningBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(0, movedPawnIndex) : currentBoard.slice(0, destinationTileIndex));\r\n        let betweenBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(movedPawnIndex + 1, destinationTileIndex) : currentBoard.slice(destinationTileIndex + 1, movedPawnIndex));\r\n        let endBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(destinationTileIndex + 1, 25) : currentBoard.slice(movedPawnIndex + 1, 25));\r\n\r\n        let newBoard = (activePlayer === \"🎅🏽\" ? beginningBoard.concat(\"\", betweenBoard, activePlayer, endBoard) : beginningBoard.concat(activePlayer, betweenBoard, \"\", endBoard));\r\n        setHistory([...history, { board: newBoard }]);\r\n        setCards({   \r\n            playerOneCards: [...cards.playerOneCards],\r\n            playerTwoCards: [...cards.playerTwoCards],\r\n            inactiveCard: cards.activeCard,\r\n            activeCard: [0, \"Choose a card to play\", 0, 0, 0, 0]\r\n        });\r\n    }\r\n\r\n    const handleTileClick = (i) => {\r\n        if (selectedPawn === null && currentBoard[i] === activePlayer) {\r\n            handlePawnClick(i);\r\n            return;\r\n        } else if (selectedPawn === i) {\r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n            setSelectedPawn(null);\r\n            return;\r\n        } else if (selectedTiles[i] === \"movement-allowed\") {\r\n            handlePawnMovement(selectedPawn, i);\r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n            setSelectedPawn(null);\r\n            activePlayer === \"🎅🏽\" ? setActivePlayer(\"🕵🏽‍♀️\") : setActivePlayer(\"🎅🏽\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n        } else {\r\n            setCurrentBoard(history[history.length - 1].board);\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>Active Player: {activePlayer}</h3>\r\n            <button onClick={() => { setHistory([...history, { board: history[0].board }]); setSelectedPawn(null); setActivePlayer(\"🎅🏽\"); setSelectedTiles(Array(25).fill(\"no-movement-allowed\")) }}>Reset the board</button>\r\n            <Cards handleCardClick={handleCardClick} cards={cards.playerOneCards} player={\"🎅🏽\"}></Cards>\r\n            <Board selectedTiles={selectedTiles} handleTileClick={handleTileClick} currentBoard={currentBoard}></Board>\r\n            <ScoreBoard></ScoreBoard>\r\n            <div>Inactive Card: {cards.inactiveCard[1]}</div>\r\n            <div>Active Card: {cards.activeCard[1]}; Movements: {cards.activeCard[2]}, {cards.activeCard[3]}, {cards.activeCard[4]}, {cards.activeCard[5]}</div>\r\n            <Cards handleCardClick={handleCardClick} cards={cards.playerTwoCards} player={\"🕵🏽‍♀️\"}></Cards>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Onitama</h1>\n      </header>\n      <div className=\"coffee-container\">\n        <div className=\"coffee-cup\"></div>\n        <div className=\"handle\"></div>\n      </div>\n      <Game>\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}