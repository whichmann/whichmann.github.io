{"version":3,"sources":["components/NonActivePlayerCards.js","components/ActivePlayerCards.js","components/Tile.js","components/Board.js","components/ScoreBoard.js","components/Game.js","App.js","index.js"],"names":["NonActivePlayersCards","ActivePlayersCards","Tile","props","className","selectedTiles","tileIndex","onClick","handleTileClick","tileInfo","Board","currentBoard","Array","map","i","trIndex","key","j","ScoreBoard","Game","useState","activePlayer","setActivePlayer","selectedPawn","setSelectedPawn","setSelectedTiles","board","history","setHistory","setCurrentBoard","isInitialMount","useRef","useEffect","current","length","fill","NonActivePlayerCards","movedPawnIndex","destinationTileIndex","beginningBoard","slice","betweenBoard","endBoard","newBoard","concat","handlePawnMovement","clickedPawnIndex","tileClassesStart","tileClassesBetween","tileClassesEnd","newTileClasses","handlePawnClick","ActivePlayerCards","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2128094b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NonActivePlayersCards = () => {\r\n    return ( <div>TODO: Non-active player cards</div> );\r\n}\r\n \r\nexport default NonActivePlayersCards;","import React from 'react'\r\n\r\nconst ActivePlayersCards = () => {\r\n    return ( <div>TODO: Active player cards</div> );\r\n}\r\n \r\nexport default ActivePlayersCards;","import React from 'react'\r\n\r\nconst Tile = (props) => {\r\n    return (<td className={props.selectedTiles[props.tileIndex]} onClick={() => props.handleTileClick(props.tileIndex)}>{props.tileInfo}</td>);\r\n}\r\n\r\nexport default Tile;","import React from 'react'\r\nimport Tile from './Tile'\r\n\r\nconst Board = ({ currentBoard, selectedTiles, handleTileClick }) => {\r\n\r\n    return (\r\n        <table>\r\n            <tbody className=\"board-game\">\r\n                {[...Array(5)].map((i, trIndex) =>\r\n                    <tr key={i}>\r\n                        {[...Array(5)].map((j, tileIndex) =>\r\n                            <Tile selectedTiles={selectedTiles} handleTileClick={handleTileClick} key={(trIndex * 5) + tileIndex} tileIndex={(trIndex * 5) + tileIndex} tileInfo={currentBoard[(trIndex * 5) + tileIndex]}></Tile>\r\n                        )}\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react'\r\n\r\nconst ScoreBoard = () => {\r\n    return ( <div>TODO: Score</div> );\r\n}\r\n \r\nexport default ScoreBoard;","import React, { useState, useEffect, useRef } from 'react';\r\nimport NonActivePlayerCards from './NonActivePlayerCards';\r\nimport ActivePlayerCards from './ActivePlayerCards';\r\nimport Board from './Board';\r\nimport ScoreBoard from './ScoreBoard';\r\n\r\n\r\n\r\nconst Game = () => {\r\n    const [activePlayer, setActivePlayer] = useState(\"🎅🏽\");\r\n    const [selectedPawn, setSelectedPawn] = useState(null);\r\n    const [selectedTiles, setSelectedTiles] = useState([\r\n        \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\",\r\n        \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\",\r\n        \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\",\r\n        \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\",\r\n        \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\", \"no-movement-allowed\",\r\n    ]);\r\n    const [history, setHistory] = useState([{\r\n        board: [\r\n            \"🎅🏽\", \"🎅🏽\", \"🎅🏽\", \"🎅🏽\", \"🎅🏽\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"\", \"\", \"\", \"\", \"\",\r\n            \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\", \"🕵🏽‍♀️\",\r\n        ]\r\n        // board: [\r\n        //     \"0s\", \"1\", \"2\", \"3\", \"4\",\r\n        //     \"5\", \"6\", \"7\", \"8\", \"9\",\r\n        //     \"10\", \"11\", \"12s\", \"13\", \"14\", \r\n        //     \"15\", \"16\", \"17\", \"18\", \"19\",\r\n        //     \"20\", \"21\", \"22\", \"23\", \"24s\",\r\n        // ]\r\n    }]);\r\n    const [currentBoard, setCurrentBoard] = useState(history[0].board);\r\n    const isInitialMount = useRef(true);\r\n\r\n    const handlePawnClick = (clickedPawnIndex) => {\r\n        if (clickedPawnIndex === selectedPawn) {\r\n            setSelectedPawn(null);\r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n        } else {\r\n            let tileClassesStart = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(0, clickedPawnIndex) : selectedTiles.slice(0, clickedPawnIndex-5));\r\n            let tileClassesBetween = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(clickedPawnIndex+1, clickedPawnIndex + 5) : selectedTiles.slice(clickedPawnIndex-4,clickedPawnIndex));\r\n            let tileClassesEnd = (activePlayer === \"🎅🏽\" ? selectedTiles.slice(clickedPawnIndex + 6, 25) : selectedTiles.slice(clickedPawnIndex+1,25));\r\n\r\n            let newTileClasses = (activePlayer === \"🎅🏽\" ? tileClassesStart.concat(\"active-pawn\",tileClassesBetween,\"movement-allowed\", tileClassesEnd) : tileClassesStart.concat(\"movement-allowed\",tileClassesBetween,\"active-pawn\",tileClassesEnd));\r\n\r\n            setSelectedTiles(newTileClasses);\r\n            setSelectedPawn(clickedPawnIndex);\r\n        }\r\n    }\r\n\r\n    const handlePawnMovement = (movedPawnIndex, destinationTileIndex) => {\r\n        let beginningBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(0, movedPawnIndex) : currentBoard.slice(0, destinationTileIndex));\r\n        let betweenBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(movedPawnIndex+1, destinationTileIndex) : currentBoard.slice(destinationTileIndex+1,movedPawnIndex));\r\n        let endBoard = (activePlayer === \"🎅🏽\" ? currentBoard.slice(destinationTileIndex+1, 25) : currentBoard.slice(movedPawnIndex+1,25));\r\n\r\n        let newBoard = (activePlayer === \"🎅🏽\" ? beginningBoard.concat(\"\",betweenBoard,activePlayer, endBoard) : beginningBoard.concat(activePlayer,betweenBoard,\"\",endBoard));\r\n        setHistory([...history, { board: newBoard }]);\r\n    }\r\n\r\n    const handleTileClick = (i) => {\r\n        if (!selectedPawn && currentBoard[i] === activePlayer) {\r\n            handlePawnClick(i);\r\n            return;\r\n        } else if (selectedPawn === i) {\r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n            setSelectedPawn(null);\r\n            return;\r\n        } else if (selectedTiles[i] === \"movement-allowed\") {\r\n            handlePawnMovement(selectedPawn, i);            \r\n            setSelectedTiles(Array(25).fill(\"no-movement-allowed\"));\r\n            setSelectedPawn(null);\r\n            activePlayer === \"🎅🏽\" ? setActivePlayer(\"🕵🏽‍♀️\") : setActivePlayer(\"🎅🏽\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isInitialMount.current) {\r\n            isInitialMount.current = false;\r\n        } else {\r\n            setCurrentBoard(history[history.length - 1].board);\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>Active Player: {activePlayer}</h3>\r\n            <button onClick={() => { setHistory([...history, { board: history[0].board }]); setSelectedTiles(Array(25).fill(\"no-movement-allowed\")) }}>Reset the board</button>\r\n            <NonActivePlayerCards></NonActivePlayerCards>\r\n            <Board selectedTiles={selectedTiles} handleTileClick={handleTileClick} currentBoard={currentBoard}></Board>\r\n            <ScoreBoard></ScoreBoard>\r\n            <ActivePlayerCards></ActivePlayerCards>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Onitama</h1>\n      </header>\n      <div className=\"coffee-container\">\n        <div className=\"coffee-cup\"></div>\n        <div className=\"handle\"></div>\n      </div>\n      <Game>\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}